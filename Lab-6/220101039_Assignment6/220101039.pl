:- dynamic mazelink/2, faultynode/1.

% Load initial maze data generated by generateMaze.cpp
:- consult('Mazedata.pl').

% BFS-based shortest path finding with cycle detection and fault avoidance
shortest_path(Src, Dst, Path) :-
    Src \== Dst,
    bfs_queue([[Src]], Dst, RevPath),
    reverse(RevPath, Path).

% Base case: path found
bfs_queue([[Dst|Path]|_], Dst, [Dst|Path]).

% Recursive case: explore next level
bfs_queue([Path|Rest], Dst, Result) :-
    extend_path(Path, NewPaths),
    append(Rest, NewPaths, UpdatedQueue),
    bfs_queue(UpdatedQueue, Dst, Result).

% Extend current path with valid adjacent nodes
extend_path([Node|Path], NewPaths) :-
    findall([NewNode, Node|Path],
            (mazelink(Node, NewNode),
             \+ faultynode(NewNode),
             \+ member(NewNode, [Node|Path])),
            NewPaths).

% Helper to reverse path for correct output order
reverse(List, Reversed) :- reverse_acc(List, [], Reversed).
reverse_acc([], Acc, Acc).
reverse_acc([H|T], Acc, Reversed) :- reverse_acc(T, [H|Acc], Reversed).

% Interactive menu system
menu :-
    repeat,
    nl, write('=== Maze Pathfinder Menu ==='), nl, nl,
    write('1. Add faulty node'), nl,
    write('2. Remove faulty node'), nl,
    write('3. Find shortest path'), nl,
    write('4. Display current faulty nodes'), nl,
    write('5. Exit'), nl, nl,
    write('Enter your choice (1-5): '),
    read(Choice),
    (  Choice =:= 1 ->
        add_faulty_node
    ;  Choice =:= 2 ->
        remove_faulty_node
    ;  Choice =:= 3 ->
        find_shortest_path
    ;  Choice =:= 4 ->
        display_faulty_nodes
    ;  Choice =:= 5 ->
        !, write('Exiting program.'), nl
    ;  write('Invalid choice. Please try again.'), nl, fail
    ).

% Menu option handlers
add_faulty_node :-
    write('Enter node to mark as faulty: '),
    read(Node),
    (   faultynode(Node) 
    ->  write('Node '), write(Node), write(' is already faulty.'), nl
    ;   assertz(faultynode(Node)),
        write('Node '), write(Node), write(' marked as faulty.'), nl
    ).

remove_faulty_node :-
    write('Enter node to remove from faulty list: '),
    read(Node),
    (   retract(faultynode(Node)) 
    ->  write('Node '), write(Node), write(' is no longer faulty.'), nl
    ;   write('Node '), write(Node), write(' was not faulty.'), nl
    ).

find_shortest_path :-
    write('Enter source node: '), read(Src),
    write('Enter destination node: '), read(Dst),
    (   shortest_path(Src, Dst, Path) 
    ->  nl, write('Shortest path found: '), write(Path), nl
    ;   nl, write('No valid path exists between '), write(Src),
        write(' and '), write(Dst), write('.'), nl
    ).

display_faulty_nodes :-
    findall(Node, faultynode(Node), FaultyNodes),
    (   FaultyNodes == [] 
    ->  write('There are currently no faulty nodes.'), nl
    ;   write('Current faulty nodes: '), write(FaultyNodes), nl
    ).

% Sample queries for testing
sample_queries :-
    write('Running sample queries...'), nl, nl,
    
    % Example 1: Simple path
    write('Example 1: Shortest path from 0 to 4'), nl,
    (shortest_path(0, 4, Path1) ->
        write('Path: '), write(Path1), nl
    ;
        write('No path found'), nl),
    nl,
    
    % Example 2: Path blocked by faults
    write('Example 2: Adding faulty nodes 1 and 3, then finding path 0 to 4'), nl,
    assertz(faultynode(1)), assertz(faultynode(3)),
    (shortest_path(0, 4, Path2) ->
        write('Path: '), write(Path2), nl
    ;
        write('No path found (expected due to faults)'), nl),
    retract(faultynode(1)), retract(faultynode(3)),
    nl,
    
    % Example 3: Dynamic fault management
    write('Example 3: Dynamic fault demonstration'), nl,
    write('Adding temporary fault at node 6...'), nl,
    assertz(faultynode(6)),
    (shortest_path(0, 8, Path3) ->
        write('Path found despite fault: '), write(Path3), nl
    ;
        write('No path found'), nl),
    write('Removing fault at node 6...'), nl,
    retract(faultynode(6)),
    nl.

% Start the program
start :-
    write('Maze Pathfinder Program'), nl,
    write('-----------------------'), nl,
    write('1. Load "Mazedata.pl" first if not already loaded'), nl,
    write('2. Use menu/0 to access interactive features'), nl,
    write('3. Use sample_queries/0 to test functionality'), nl, nl.